a <- 41!
a <- factorial(40)
a <- rep (seq(60, 100), each = factorial(40))
v <- rep (seq(60, 100), each = (factorial(40)))
v <- factor(seq(60, 100))
install.packages("palmerpenguins")
library(palmerpenguins)
summary(penguins)
view(penguins)
library(tidyverse)
view(penguins)
View(penguins)
library(tidyverse)
library(lubridate)
now()
today()
OlsonNames()
install.packages("Tmisc")
library(Tmisc)
? `Tmisc-package`
data("quartet")
View(quartet)
library(tidyverse)
quartet |>
group_by(set) |>
summarize(mean(x), sd(x))
quartet |>
group_by(set) |>
summarize(mean(x), sd(x), mean(y), sd(y), cor(x,y))
View(quartet)
install.packages("datasauRus")
library(datasauRus)
ggplot(datasaurus_dozen,aes(x=x,y=y,colour=dataset))+
geom_point()+theme_void()+
theme(legend.position = "none")+
facet_wrap(~dataset,ncol=3)
library(tidyverse)
library(skimr)
install.packages("skimr")
library(tidyverse)
library(skimr)
library(janitor)
install.packages("janitor")
library(janitor)
install.packages("janitor")
library(janitor)
hotel_bookings <- read_csv("")
library(tidyverse)
library(skimr)
library(janitor)
hotel_bookings <- read_csv("Google\hotelbooking.csv")
hotel_bookings <- read_csv("Google/hotelbooking.csv")
View(hotel_bookings)
hotel_bookings |>
head()
str(hotel_bookings)
colnames(hotel_bookings)
hotel_bookings |>
arrange(desc(lead_time))
arrange(desc(lead_time))
hotel_bookings_v2 <- hotel_bookings |>
arrange(desc(lead_time))
View(hotel_bookings_v2)
max(hotel_bookings$lead_time)
min(hotel_bookings$lead_time)
mean(hotel_bookings$lead_time)
hotel_bookings_v2 <- hotel_bookings |>
arrange(desc(lead_time)) |>
rename(ghaza == meal)
View(hotel_bookings_v2)
hotel_bookings_v2 <- hotel_bookings |>
arrange(desc(lead_time)) |>
rename(ghaza <- meal)
View(hotel_bookings_v2)
library(tidyverse)
library(palmerpenguins)
pinguins <- data(palmerpinguins)
pinguins <- data_frame(penguins)
View(pinguins)
ggplot(data = pinguins) + geom_point(mapping = aes(x = flipper_length_mm, y = body_mass_g))
ggplot(pinguins) +
geom_point(aes(x = flipper_length_mm, y = body_mass_g))
# Required Libraries
library(readr)    # For reading CSV files
library(readxl)   # For reading Excel files
library(httr)     # For accessing APIs
library(jsonlite) # For handling JSON data from APIs
library(pdftools) # For reading PDFs
install.packages("pdftools")
library(pdftools) # For reading PDFs
library(xml2)
# Function to load CSV file
load_csv <- function(file_path) {
tryCatch({
data <- read_csv(file_path)
return(data)
}, error = function(e) {
message("Error loading CSV: ", e)
return(NULL)
})
}
# Function to load Excel file
load_excel <- function(file_path, sheet = 1) {
tryCatch({
data <- read_excel(file_path, sheet = sheet)
return(data)
}, error = function(e) {
message("Error loading Excel: ", e)
return(NULL)
})
}
# Function to load data from an API (JSON response)
load_api <- function(url) {
tryCatch({
response <- GET(url)
content <- content(response, as = "text")
data <- fromJSON(content)
return(data)
}, error = function(e) {
message("Error loading API: ", e)
return(NULL)
})
}
# Function to load data from a PDF file
load_pdf <- function(file_path) {
tryCatch({
text <- pdf_text(file_path)
return(text)
}, error = function(e) {
message("Error loading PDF: ", e)
return(NULL)
})
}
# Function to load data from a website (HTML table)
load_html_table <- function(url, table_num = 1) {
tryCatch({
page <- read_html(url)
tables <- html_table(page, fill = TRUE)
return(tables[[table_num]])
}, error = function(e) {
message("Error loading HTML table: ", e)
return(NULL)
})
}
# Function to automate data loading based on file type or source
load_data <- function(source, source_type, ...) {
switch(source_type,
"csv" = load_csv(source),
"excel" = load_excel(source, ...),
"api" = load_api(source),
"pdf" = load_pdf(source),
"html" = load_html_table(source, ...),
stop("Unsupported source type. Please provide a valid source type: csv, excel, api, pdf, html.")
)
}
# Example Usage
# Loading a CSV file
csv_data <- load_data("data/sample.csv", "csv")
# Loading an Excel file
excel_data <- load_data("data/sample.xlsx", "excel", sheet = 1)
# Loading data from an API
api_data <- load_data("https://api.sample.com/data", "api")
# Loading text from a PDF file
pdf_text <- load_data("data/sample.pdf", "pdf")
# Loading an HTML table from a website
html_table <- load_data("https://example.com", "html", table_num = 1)
# Output loaded data
print(csv_data)
print(excel_data)
print(api_data)
print(pdf_text)
print(html_table)
install.packages("roxygen2")
install.packages("devtools")
Sys.which("make")
setwd("C:/Users/hraja/Documents/Google/DataLoader/DataLoader")
devtools::document()
